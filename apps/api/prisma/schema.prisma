// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Dev default: SQLite. If you later move to Postgres, change provider+url.
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ===== Strings instead of enums (SQLite on Prisma 5.x doesn't support enums) =====

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  role         String
  passwordHash String
  phone        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  vehicles     Vehicle[]
  appointments Appointment[]
}

model Vehicle {
  id        String   @id @default(uuid())
  userId    String
  make      String
  model     String
  year      Int
  trim      String
  tireSize  String
  createdAt DateTime @default(now())

  user         User          @relation(fields: [userId], references: [id])
  appointments Appointment[]

  @@index([userId])
}

model Technician {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  email     String?
  createdAt DateTime @default(now())

  appointments Appointment[]
}

model Appointment {
  id        String  @id @default(uuid())
  userId    String
  vehicleId String
  address   String
  notes     String?

  // Core slot (exact or window)
  slotStart DateTime
  slotEnd   DateTime

  // Strings instead of enums for SQLite
  schedulingMode     String    @default("WINDOW") // "EXACT" | "WINDOW"
  arrivalWindowStart DateTime?
  arrivalWindowEnd   DateTime?

  // Lifecycle
  scheduleState  String @default("DRAFT") // "DRAFT" | "INTERNAL_CONFIRMED" | "SENT_TO_CUSTOMER" | "CUSTOMER_CONFIRMED" | "CUSTOMER_DECLINED" | "CANCELLED"
  dispatchStatus String @default("UNASSIGNED") // "UNASSIGNED" | "ASSIGNED" | "IN_ROUTE" | "COMPLETE"

  // Customer confirmation flow
  customerConfirmToken   String?
  customerConfirmExpires DateTime?
  customerConfirmedAt    DateTime?

  // “3 days prior ~8pm” locking marker
  windowLockedAt DateTime?

  // Technician assignment
  techId String?
  tech   Technician? @relation(fields: [techId], references: [id])

  // Relations
  user     User                 @relation(fields: [userId], references: [id])
  vehicle  Vehicle              @relation(fields: [vehicleId], references: [id])
  services AppointmentService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([vehicleId])
  @@index([slotStart, slotEnd])
  @@index([scheduleState])
}

model AppointmentService {
  id            String  @id @default(cuid())
  appointmentId String
  kind          String // "TIRE_SWAP" | "MOUNT_BALANCE" | "TPMS" | "ROTATION" | "OIL_CHANGE" | "OTHER"
  name          String
  qty           Int     @default(1)
  unitPrice     Int?
  notes         String?

  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@index([appointmentId])
  @@index([kind])
}
